<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_roller_tote" Id="{2ed0c700-8709-4652-aea4-f2176b9c0864}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_roller_tote EXTENDS FB_Generic
VAR_INPUT
	pre_tote_status			: ToteStatus;//roller -1 totestatus=ready
	next_tote_status		: ToteStatus;//roller +1 totestatus=empty
	roller					: Roller;	
	id_roller				: INT;
	sensor_mute				: FB_DigitalInput;
END_VAR
VAR_OUTPUT
	
END_VAR
VAR_IN_OUT
	
END_VAR
	
VAR
	mcAxis			: FB_MotionAxis_MC;
	st_mcAxis 		: ST_MotionAxis_MC;
	AxisRef			: AXIS_REF;
	current_tote_status		: ToteStatus;//state of current roller tote
	ton_timeout	: TON;	
	eStates					: E_RollerStates :=	E_RollerStates.IDLE;
	eStateTemp				: E_RollerStates :=	E_RollerStates.IDLE;
	iStateTemp				: INT;
	sStateTemp				: STRING;
	errorMessage			: STRING;
	xError	: BOOL;
	event				: ST_EVENT;
	rt_error			: R_TRIG;
	bStopped				: BOOL;
	rTrig_electricalError	:ARRAY[0..10] OF R_TRIG;
END_VAR
VAR CONSTANT
	rMax_stopper	: REAL	:= 90;
	rMin_stopper	: REAL	:= -1;
	sComponent_name			: STRING := 'fb_roller';
END_VAR
VAR PERSISTENT
	rPos_up			: REAL;
	rPos_down		: REAL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();

//rPos_up			:=60;
//rPos_down		:=0;


//////////////////////////////////////////write electrical error///////////////////////////////////////////////
rTrig_electricalError[1](CLK:= roller.err);
rTrig_electricalError[2](CLK:= id_roller=3 AND st_mcAxis.mcReadStatus.Error);
IF GVL.PackTags.Status.StateCurrent<>E_PMLState.ePMLState_Resetting THEN
	FOR i:=0 TO 10 DO
		IF rTrig_electricalError[i].Q THEN
			THIS^.packTags.Admin.Alarm[i].ID	:= i;
			CASE i OF
				1:
					THIS^.packTags.Admin.Alarm[1].Message	:= 'roller is in error state';
				2:
					THIS^.packTags.Admin.Alarm[2].Message	:= 'axis of stopper is in error state';
			END_CASE
			GVL.pml_adminAlarm.M_SetAlarm(stAdmin:=GVL.PackTags.Admin,stAlarm := THIS^.packTags.Admin.Alarm[i]);
		END_IF
	END_FOR
END_IF


	
//rTrig_electricalError[1](CLK:= THIS^.packTags.Admin.Alarm[1].Trigger);
//rTrig_electricalError[2](CLK:= THIS^.packTags.Admin.Alarm[2].Trigger);

//IF GVL.PackTags.Status.StateCurrent<>E_PMLState.ePMLState_Resetting THEN
//	FOR i:=0 TO 10 DO
//		IF rTrig_electricalError[i].Q THEN
//			GVL.pml_adminAlarm.M_SetAlarm(stAdmin:=GVL.PackTags.Admin,stAlarm:=GVL.alarm_temp);
//		END_IF
//	END_FOR
//END_IF

//IF roller.err THEN
//	THIS^.packTags.Admin.Alarm[1].Message	:= 'roller is in error state';
//	THIS^.packTags.Admin.Alarm[1].ID	:= 1;
//	THIS^.packTags.Admin.Alarm[1].Trigger	:= TRUE;
//ELSE
//	THIS^.packTags.Admin.Alarm[1].Trigger	:= FALSE;
//END_IF
//IF id_roller=3 AND st_mcAxis.mcReadStatus.Error THEN
//	THIS^.packTags.Admin.Alarm[2].Message	:= 'axis of stopper is in error state';
//	THIS^.packTags.Admin.Alarm[2].ID	:= 2;
//	THIS^.packTags.Admin.Alarm[2].Trigger	:= TRUE;
//ELSE
//	THIS^.packTags.Admin.Alarm[2].Trigger	:= FALSE;
//END_IF
]]></ST>
    </Implementation>
    <Method Name="M_Aborting" Id="{921855bf-9cd6-4708-a05d-11491d309808}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Aborting'}
METHOD M_Aborting
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE fbUnitModeManager.eModeStatus OF	
	ePMLProtUnitMode_Production, ePMLProtUnitMode_Manual:		
		roller.forward	:= FALSE;	
		roller.backward	:= FALSE;
		st_mcAxis.mcMoveAbsolute.Execute	:= FALSE;
		st_mcAxis.mcStop.Execute	:= TRUE;		
		M_StateComplete();
			
	ePMLProtUnitMode_Maintenance, ePMLUnitMode_Service:
		
		M_StateComplete();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_agingTest" Id="{c3176ce3-16cf-40ea-b3bb-877ac1c2103a}">
      <Declaration><![CDATA[METHOD M_agingTest : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_AgingTest	:= FALSE;
//////////////////////////////////////////////////////////timeout//////////////////////////////////////////
iStateTemp	:= eStateTemp;
ton_timeout();
IF eStateTemp=eStates THEN
	ton_timeout.IN	:=TRUE;
ELSE
	ton_timeout.IN	:=FALSE;
	eStateTemp	:= eStates;	
END_IF
IF ton_timeout.Q THEN	
	ton_timeout.IN	:=FALSE;
	CASE eStates OF		
		E_RollerStates.AGING_STATE_0:	
			GVL.alarm_temp.Message	:= 'AGING_STATE_0 Timeout while buffer roller aging test';
		E_RollerStates.AGING_STATE_1:	
			GVL.alarm_temp.Message	:= 'AGING_STATE_1 Timeout while buffer roller aging test';							
		ELSE
			GVL.alarm_temp.Message	:= 'UNKNOWN STATE Timeout while buffer roller aging test';		
	END_CASE
	IF eStates<>E_RollerStates.WAIT AND eStates<>E_RollerStates.WAIT_1 THEN
		//GVL.pml_adminAlarm.M_SetAlarm(stAdmin:=GVL.PackTags.Admin,stAlarm:=GVL.alarm_temp);
	END_IF
END_IF

CASE eStates OF
	E_RollerStates.IDLE:
		eStates	:= E_RollerStates.AGING_STATE_0;
	E_RollerStates.AGING_STATE_0:
		ton_timeout.PT	:= T#5S;
		roller.forward	:= TRUE;
		roller.backward	:= FALSE;
		st_mcAxis.mcMoveAbsolute.Execute	:= TRUE;						
		st_mcAxis.rActualPosSet	:= rPos_up;
		st_mcAxis.rVelocitySet	:= 100;
		//IF st_mcAxis.mcMoveAbsolute.Done AND ton_timeout.Q THEN
		IF ton_timeout.Q THEN	
			eStates	:= E_RollerStates.WAIT;
		END_IF			
	E_RollerStates.WAIT:
		roller.forward			:= FALSE;
		roller.backward			:= FALSE;	
		st_mcAxis.mcMoveAbsolute.Execute	:= FALSE;	
		ton_timeout.PT	:= T#2S;
		IF ton_timeout.Q THEN
			eStates	:= E_RollerStates.AGING_STATE_1;
		END_IF
	E_RollerStates.AGING_STATE_1:
		ton_timeout.PT	:= T#5S;
		roller.forward	:= TRUE;
		roller.backward	:= TRUE;
		st_mcAxis.mcMoveAbsolute.Execute	:= TRUE;						
		st_mcAxis.rActualPosSet	:= rPos_down;
		st_mcAxis.rVelocitySet	:= 100;
		//IF st_mcAxis.mcMoveAbsolute.Done AND ton_timeout.Q THEN
		IF ton_timeout.Q THEN	
			eStates	:= E_RollerStates.WAIT_1;
		END_IF	
	E_RollerStates.WAIT_1:
		roller.forward			:= FALSE;
		roller.backward			:= FALSE;	
		st_mcAxis.mcMoveAbsolute.Execute	:= FALSE;	
		ton_timeout.PT	:= T#2S;
		IF ton_timeout.Q THEN
			eStates	:= E_RollerStates.IDLE;
		END_IF	
	E_RollerStates.DONE:
		;
	E_RollerStates.ERROR:
		;
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{6b75ddf1-3714-488f-bab7-f10cd0a709e0}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Execute'}
METHOD M_Execute

VAR

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE fbUnitModeManager.eModeStatus OF
	ePMLProtUnitMode_Production:		//Mode Production
		//Processing automatic Seperation

//////////////////////////////////////////////////////////timeout//////////////////////////////////////////
	iStateTemp	:= eStateTemp;
	ton_timeout();

	IF eStateTemp=eStates THEN
		ton_timeout.IN	:=TRUE;
	ELSE
		ton_timeout.IN	:=FALSE;	
		eStateTemp	:= eStates;
	END_IF

	IF ton_timeout.Q THEN	
		ton_timeout.IN	:=FALSE;
		CASE eStates OF
			E_RollerStates.STOPPER_DOWN:		
				GVL.alarm_temp.Message	:= 'STOPPER_DOWN Timeout in roller[3]';
			E_RollerStates.ROLLER_UNLOAD:		
				GVL.alarm_temp.Message	:= 'ROLLER_UNLOAD Timeout in roller[3]';
			E_RollerStates.WAIT_MUTE_OFF:
				GVL.alarm_temp.Message	:= 'WAIT_MUTE_OFF Timeout in roller[3]';
			E_RollerStates.STOPPER_UP:	
				GVL.alarm_temp.Message	:= 'STOPPER_UP Timeout in roller[3]';		
		ELSE
			GVL.alarm_temp.Message	:= 'UNKNOWN STATE in roller[3]';					
		END_CASE
		IF eStates<>E_RollerStates.IDLE AND eStates<>E_RollerStates.DETECTION AND eStates<>E_RollerStates.LOADING AND eStates<>E_RollerStates.UNLOADING THEN
			GVL.pml_adminAlarm.M_SetAlarm(stAdmin:=GVL.PackTags.Admin,stAlarm:=GVL.alarm_temp);
		END_IF
	END_IF
	
	CASE eStates OF 
		E_RollerStates.IDLE:
			roller.forward	:= FALSE;
			ton_timeout.PT	:= T#10S;
			eStates	:= E_RollerStates.INIT;
		E_RollerStates.INIT:		
			eStates	:= E_RollerStates.DETECTION;
		E_RollerStates.DETECTION:
			roller.forward	:= FALSE;
			st_mcAxis.mcMoveAbsolute.Execute	:= FALSE;		
			IF roller.sensor.Q THEN
				current_tote_status	:= ToteStatus.READY;
			ELSE
				current_tote_status	:= ToteStatus.EMPTY;
			END_IF		
			IF pre_tote_status=ToteStatus.READY AND current_tote_status=ToteStatus.EMPTY THEN
				eStates	:= E_RollerStates.LOADING;
			END_IF
			IF next_tote_status=ToteStatus.EMPTY AND current_tote_status=ToteStatus.READY THEN
					eStates	:= E_RollerStates.UNLOADING;					
			END_IF
		///////////////////////////////load/////////////////////////////////			
		E_RollerStates.LOADING:		
			IF roller.sensor.Q THEN
				eStates	:= E_RollerStates.DONE;
				roller.forward	:= FALSE;
			ELSE
				roller.forward	:= TRUE;
			END_IF
			IF ton_timeout.Q THEN
				eStates	:= E_RollerStates.DONE;
			END_IF
		///////////////////////////////unload/////////////////////////////////
		E_RollerStates.UNLOADING:	
			IF id_roller=3 THEN
				eStates	:= E_RollerStates.STOPPER_DOWN;
			ELSE	
				IF roller.sensor.Q THEN			
					roller.forward	:= TRUE;
				ELSE
					eStates	:= E_RollerStates.DONE;
					roller.forward	:= FALSE;
				END_IF	
				IF ton_timeout.Q THEN
					eStates	:= E_RollerStates.DONE;
				END_IF
			END_IF	
		E_RollerStates.STOPPER_DOWN:
			st_mcAxis.mcMoveAbsolute.Execute	:= TRUE;						
			st_mcAxis.rActualPosSet	:= rPos_down;
			st_mcAxis.rVelocitySet	:= 200;
			IF st_mcAxis.mcMoveAbsolute.Done THEN
				st_mcAxis.mcMoveAbsolute.Execute	:= FALSE;
				eStates	:= E_RollerStates.ROLLER_UNLOAD;
			END_IF					
		E_RollerStates.ROLLER_UNLOAD:
			roller.forward	:= TRUE;
			IF sensor_mute.Q THEN
				eStates	:= E_RollerStates.WAIT_MUTE_OFF;
			END_IF
		E_RollerStates.WAIT_MUTE_OFF:
			roller.forward	:= TRUE;
			IF NOT sensor_mute.Q THEN
				roller.forward	:= FALSE;
				eStates	:= E_RollerStates.STOPPER_UP;
			END_IF
		E_RollerStates.STOPPER_UP:
			st_mcAxis.mcMoveAbsolute.Execute	:= TRUE;						
			st_mcAxis.rActualPosSet	:= rPos_up;
			st_mcAxis.rVelocitySet	:= 200;
			IF st_mcAxis.mcMoveAbsolute.Done THEN
				st_mcAxis.mcMoveAbsolute.Execute	:= FALSE;
				eStates	:= E_RollerStates.DONE;
			END_IF			
		E_RollerStates.DONE:			
			eStates	:= E_RollerStates.IDLE;	
	END_CASE

	

		
		
	ePMLProtUnitMode_Maintenance, ePMLUnitMode_Service:		
		//
		
	ePMLProtUnitMode_Manual:		//Manaul

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Idle" Id="{9e309c36-516f-4fbf-ac58-f45875460be1}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Idle'}
METHOD M_Idle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF G_HMI.bAging_test THEN
	M_agingTest();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_mapping" Id="{004c2bc4-8f17-4345-8c21-ab1dc6ba2222}">
      <Declaration><![CDATA[METHOD M_mapping : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
/////////////////////
mcAxis
(
	ZSP		:= NOT st_mcAxis.digitalInputs.16 OR st_mcAxis.xHoming, 
	ZSN		:= NOT st_mcAxis.digitalInputs.17 OR st_mcAxis.xHoming, 
	IN_OUT	:= 	st_mcAxis, 
	AXIS	:= 	AxisRef	, 
);
st_mcAxis.bPosSensorShow	:= TRUE;
st_mcAxis.bNegSensorShow	:= TRUE;
st_mcAxis.bStopButtonShow	:= TRUE;
st_mcAxis.rMaxAcceleration	:= 50000;
st_mcAxis.rMaxDeceleration	:= 50000;
st_mcAxis.rMaxJerk			:= 500000;
st_mcAxis.rAcceleration	:= 2500;
st_mcAxis.rDeceleration	:= 2500;
st_mcAxis.rJerk			:= 12500;
st_mcAxis.rMaxVelocity		:= 100;
st_mcAxis.rMaxDistance		:= 50;
st_mcAxis.bPosSen	:= NOT st_mcAxis.digitalInputs.16 ;
st_mcAxis.bNegSen	:= NOT st_mcAxis.digitalInputs.17 ;
st_mcAxis.mcHome.bCalibrationCam	:= st_mcAxis.digitalInputs.18;
st_mcAxis.bPositionSensor	:= st_mcAxis.digitalInputs.18;
st_mcAxis.bdirFW	:= TRUE;
st_mcAxis.sNetID := '192.168.11.159.5.1';

IF id_roller=3 THEN
	st_mcAxis.nSlaveAddr	:= 1008;
END_IF
st_mcAxis.rToqueLimitSet	:= 150;



]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{6fa89d9e-015b-4cc5-b9e8-bcb1129da123}">
      <Declaration><![CDATA[METHOD M_Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Take away all commands
IF GVL.stChangeIntoProduction.bYesReset THEN
;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Resetting" Id="{be9ca26e-d292-4565-9c8c-c5f89e81fe37}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Resetting'}
METHOD M_Resetting
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE fbUnitModeManager.eModeStatus OF
	ePMLProtUnitMode_Production:		//Production, Mantainance, Manual
		st_mcAxis.mcStop.Execute	:= FALSE;
		st_mcAxis.mcReset.Execute	:= TRUE;
		ton_timeout.IN	:= FALSE;	
		M_StateComplete();
	
	ePMLProtUnitMode_Maintenance, ePMLProtUnitMode_Manual, ePMLUnitMode_Service:
		M_StateComplete();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Starting" Id="{a1303dad-4da8-4ac1-aac5-47ff35c7e12a}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Starting'}
METHOD M_Starting
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE fbUnitModeManager.eModeStatus OF
	ePMLProtUnitMode_Production:		//Production, Mantainance, Manual
		//Resetting all Commands and Values
		st_mcAxis.mcPower.Enable	:= TRUE;
		IF roller.sensor.Q THEN
			current_tote_status	:= ToteStatus.READY;
		ELSE
			current_tote_status	:= ToteStatus.EMPTY;
		END_IF	
		ton_timeout.IN	:=FALSE;
		M_StateComplete();

	ePMLProtUnitMode_Maintenance, ePMLProtUnitMode_Manual, ePMLUnitMode_Service:
		M_StateComplete();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopping" Id="{9b2f6aba-a2d9-4cad-99cd-1618e41d4614}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Stopping'}
METHOD M_Stopping
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE fbUnitModeManager.eModeStatus OF
	ePMLProtUnitMode_Production, ePMLProtUnitMode_Manual:
//////////////////////////////////////////////////////////timeout//////////////////////////////////////////
	iStateTemp	:= eStateTemp;
	ton_timeout();

	IF eStateTemp=eStates THEN
		ton_timeout.IN	:=TRUE;
	ELSE
		ton_timeout.IN	:=FALSE;	
		eStateTemp	:= eStates;
	END_IF

	IF ton_timeout.Q THEN	
		ton_timeout.IN	:=FALSE;
		CASE eStates OF
			E_RollerStates.STOPPER_DOWN:		
				GVL.alarm_temp.Message	:= 'STOPPER_DOWN Timeout in roller[3]';
			E_RollerStates.ROLLER_UNLOAD:		
				GVL.alarm_temp.Message	:= 'ROLLER_UNLOAD Timeout in roller[3]';
			E_RollerStates.WAIT_MUTE_OFF:
				GVL.alarm_temp.Message	:= 'WAIT_MUTE_OFF Timeout in roller[3]';
			E_RollerStates.STOPPER_UP:	
				GVL.alarm_temp.Message	:= 'STOPPER_UP Timeout in roller[3]';		
		ELSE
			GVL.alarm_temp.Message	:= 'UNKNOWN STATE in roller[3]';					
		END_CASE
		IF eStates<>E_RollerStates.IDLE AND eStates<>E_RollerStates.DETECTION AND eStates<>E_RollerStates.LOADING AND eStates<>E_RollerStates.UNLOADING THEN
			GVL.pml_adminAlarm.M_SetAlarm(stAdmin:=GVL.PackTags.Admin,stAlarm:=GVL.alarm_temp);
		END_IF
	END_IF
	
	CASE eStates OF 
		E_RollerStates.IDLE:
			roller.forward	:= FALSE;
			ton_timeout.PT	:= T#10S;
			eStates	:= E_RollerStates.INIT;
		E_RollerStates.INIT:		
			eStates	:= E_RollerStates.DETECTION;
		E_RollerStates.DETECTION:
			M_StateComplete();
			roller.forward	:= FALSE;
			st_mcAxis.mcMoveAbsolute.Execute	:= FALSE;		
//			IF roller.sensor.Q THEN
//				current_tote_status	:= ToteStatus.READY;
//			ELSE
//				current_tote_status	:= ToteStatus.EMPTY;
//			END_IF		
//			IF pre_tote_status=ToteStatus.READY AND current_tote_status=ToteStatus.EMPTY THEN
//				eStates	:= E_RollerStates.LOADING;
//			END_IF
//			IF next_tote_status=ToteStatus.EMPTY AND current_tote_status=ToteStatus.READY THEN
//				IF id_roller=3 THEN
//					IF GVL.fb_loading.eTransfer=E_Transfer.LOAD THEN
//						eStates	:= E_RollerStates.UNLOADING;
//					END_IF
//				ELSE
//					eStates	:= E_RollerStates.UNLOADING;
//				END_IF					
//			END_IF
		///////////////////////////////load/////////////////////////////////			
		E_RollerStates.LOADING:		
			IF roller.sensor.Q THEN
				eStates	:= E_RollerStates.DONE;
				roller.forward	:= FALSE;
			ELSE
				roller.forward	:= TRUE;
			END_IF
			IF ton_timeout.Q THEN
				eStates	:= E_RollerStates.DONE;
			END_IF
		///////////////////////////////unload/////////////////////////////////
		E_RollerStates.UNLOADING:	
			IF id_roller=3 THEN
				eStates	:= E_RollerStates.STOPPER_DOWN;
			ELSE	
				IF roller.sensor.Q THEN			
					roller.forward	:= TRUE;
				ELSE
					eStates	:= E_RollerStates.DONE;
					roller.forward	:= FALSE;
				END_IF	
				IF ton_timeout.Q THEN
					eStates	:= E_RollerStates.DONE;
				END_IF
			END_IF	
		E_RollerStates.STOPPER_DOWN:
			st_mcAxis.mcMoveAbsolute.Execute	:= TRUE;						
			st_mcAxis.rActualPosSet	:= rPos_down;
			st_mcAxis.rVelocitySet	:= 200;
			IF st_mcAxis.mcMoveAbsolute.Done THEN
				st_mcAxis.mcMoveAbsolute.Execute	:= FALSE;
				eStates	:= E_RollerStates.ROLLER_UNLOAD;
			END_IF					
		E_RollerStates.ROLLER_UNLOAD:
			roller.forward	:= TRUE;
			IF sensor_mute.Q THEN
				eStates	:= E_RollerStates.WAIT_MUTE_OFF;
			END_IF
		E_RollerStates.WAIT_MUTE_OFF:
			roller.forward	:= TRUE;
			IF NOT sensor_mute.Q THEN
				roller.forward	:= FALSE;
				eStates	:= E_RollerStates.STOPPER_UP;
			END_IF
		E_RollerStates.STOPPER_UP:
			st_mcAxis.mcMoveAbsolute.Execute	:= TRUE;						
			st_mcAxis.rActualPosSet	:= rPos_up;
			st_mcAxis.rVelocitySet	:= 200;
			IF st_mcAxis.mcMoveAbsolute.Done THEN
				st_mcAxis.mcMoveAbsolute.Execute	:= FALSE;
				eStates	:= E_RollerStates.DONE;
			END_IF			
		E_RollerStates.DONE:	
			roller.forward	:= FALSE;
			st_mcAxis.mcMoveAbsolute.Execute	:= FALSE;		
			eStates	:= E_RollerStates.IDLE;	
			M_StateComplete();
	END_CASE

	ePMLProtUnitMode_Maintenance, ePMLUnitMode_Service:
		M_StateComplete();	
			//not defined
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Undefined" Id="{6ceee056-9529-4989-94fa-8e0f856e1c7c}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Undefined'}
METHOD M_Undefined
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
bUndefinedDone					:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_roller_tote">
      <LineId Id="9" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="104" Count="2" />
      <LineId Id="194" Count="0" />
      <LineId Id="198" Count="8" />
      <LineId Id="213" Count="2" />
      <LineId Id="217" Count="1" />
      <LineId Id="125" Count="0" />
      <LineId Id="220" Count="1" />
      <LineId Id="219" Count="0" />
      <LineId Id="128" Count="1" />
      <LineId Id="131" Count="22" />
      <LineId Id="127" Count="0" />
    </LineIds>
    <LineIds Name="FB_roller_tote.M_Aborting">
      <LineId Id="3" Count="1" />
      <LineId Id="30" Count="2" />
      <LineId Id="11" Count="3" />
      <LineId Id="27" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_roller_tote.M_agingTest">
      <LineId Id="6" Count="3" />
      <LineId Id="160" Count="18" />
      <LineId Id="31" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="32" Count="4" />
      <LineId Id="114" Count="1" />
      <LineId Id="37" Count="2" />
      <LineId Id="102" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="42" Count="2" />
      <LineId Id="97" Count="1" />
      <LineId Id="105" Count="0" />
      <LineId Id="45" Count="4" />
      <LineId Id="116" Count="6" />
      <LineId Id="134" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="124" Count="5" />
      <LineId Id="62" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_roller_tote.M_Execute">
      <LineId Id="3" Count="2" />
      <LineId Id="127" Count="2" />
      <LineId Id="131" Count="5" />
      <LineId Id="140" Count="1" />
      <LineId Id="143" Count="0" />
      <LineId Id="145" Count="3" />
      <LineId Id="151" Count="1" />
      <LineId Id="155" Count="1" />
      <LineId Id="159" Count="1" />
      <LineId Id="297" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="164" Count="1" />
      <LineId Id="167" Count="6" />
      <LineId Id="305" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="179" Count="12" />
      <LineId Id="197" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="203" Count="1" />
      <LineId Id="206" Count="10" />
      <LineId Id="218" Count="26" />
      <LineId Id="299" Count="0" />
      <LineId Id="245" Count="13" />
      <LineId Id="263" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="288" Count="1" />
      <LineId Id="105" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="50" Count="3" />
      <LineId Id="64" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_roller_tote.M_Idle">
      <LineId Id="5" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_roller_tote.M_mapping">
      <LineId Id="394" Count="3" />
      <LineId Id="399" Count="0" />
      <LineId Id="428" Count="0" />
      <LineId Id="400" Count="27" />
      <LineId Id="85" Count="0" />
    </LineIds>
    <LineIds Name="FB_roller_tote.M_Reset">
      <LineId Id="3" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_roller_tote.M_Resetting">
      <LineId Id="3" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="45" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_roller_tote.M_Starting">
      <LineId Id="3" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="22" Count="3" />
      <LineId Id="21" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_roller_tote.M_Stopping">
      <LineId Id="3" Count="1" />
      <LineId Id="135" Count="37" />
      <LineId Id="248" Count="0" />
      <LineId Id="173" Count="72" />
      <LineId Id="251" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="13" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_roller_tote.M_Undefined">
      <LineId Id="4" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>