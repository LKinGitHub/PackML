<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_buffer_tote" Id="{19049f21-ed2b-4a13-83c2-eea6536c4f38}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_buffer_tote EXTENDS FB_Generic
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR

	fb_rollers		: ARRAY[0..iHas_rollers] OF FB_roller_tote;
	sensor_start	: ARRAY[0..1] OF FB_DigitalInput;//sensor at the beginning of roller[0]
	EDM_24v	: BOOL;//edm_24v
	EDM_sto	: BOOL;//edm_sto
	xError	: BOOL;
	
	
	event				: ST_EVENT;
	rt_error			: R_TRIG;
	bStopped			: BOOL;
	stSubModuleInfo		: ARRAY [1..iSubModule] OF ST_PMLSubUnitInfo;	//Informations about the Subunits
	aUnitInfo	: ARRAY[0..3] OF ST_UnitInfo;
	bMachineStartedUp	: BOOL;
END_VAR
VAR CONSTANT
	iHas_rollers	: INT:=3;
	iSubModule		: UDINT:=4;
	sComponent_name			: STRING := 'fb_buffer';
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();
IF sensor_start[0].Q OR sensor_start[1].Q THEN
	fb_rollers[0].pre_tote_status := ToteStatus.READY;
ELSE
	fb_rollers[0].pre_tote_status := ToteStatus.EMPTY;
END_IF
fb_rollers[0](	eModeCommand:=eModeCommand,
				eCommand:=eCommand,
				eMode	=>,
				eState =>stSubModuleInfo[1].eState,
				id_roller := 0,
				next_tote_status := fb_rollers[1].current_tote_status
				);
stSubModuleInfo[1].Active			:= TRUE;
fb_rollers[1](	eModeCommand:=eModeCommand,
				eCommand:=eCommand,
				eMode	=>,
				eState =>stSubModuleInfo[2].eState,
				id_roller := 1,
				pre_tote_status := fb_rollers[0].current_tote_status,
				next_tote_status := fb_rollers[2].current_tote_status
				);
stSubModuleInfo[2].Active			:= TRUE;
fb_rollers[2](	eModeCommand:=eModeCommand,
				eCommand:=eCommand,
				eMode	=>,
				eState =>stSubModuleInfo[3].eState,
				id_roller := 2,
				pre_tote_status := fb_rollers[1].current_tote_status,
				next_tote_status := fb_rollers[3].current_tote_status
				);
stSubModuleInfo[3].Active			:= TRUE;
fb_rollers[3](	eModeCommand:=eModeCommand,
				eCommand:=eCommand,
				eMode	=>,
				eState =>stSubModuleInfo[4].eState,
				id_roller := 3,
				pre_tote_status := fb_rollers[2].current_tote_status,
				
				);
stSubModuleInfo[4].Active			:= TRUE;

IF  fb_rollers[0].bUndefinedDone AND fb_rollers[1].bUndefinedDone AND fb_rollers[2].bUndefinedDone AND fb_rollers[3].bUndefinedDone THEN
	bUndefinedDone := TRUE;
END_IF

IF bUndefinedDone AND NOT bMachineStartedUp THEN
	eCommand	:= ePMLCommand_Abort;
	bMachineStartedUp			:= TRUE;
END_IF
//The fbStateMachine from FB_Machine gets the Information about the states and activity from the subunits
fbStateMachine.stSubUnitInfoRef.ArraySize		:= SIZEOF(stSubModuleInfo);
fbStateMachine.stSubUnitInfoRef.NoOfSubUnits	:= iSubModule;
fbStateMachine.stSubUnitInfoRef.pArray			:= ADR(stSubModuleInfo);



//Set unit information 
M_SetUnitInfo();]]></ST>
    </Implementation>
    <Method Name="M_Aborting" Id="{8bebec9d-60c2-4ac7-bf32-efe186b9bfd8}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Aborting'}
METHOD M_Aborting
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE fbUnitModeManager.eModeStatus OF	
	ePMLProtUnitMode_Production, ePMLProtUnitMode_Manual:		
		G_HMI.bAging_buffer	:= FALSE;
		M_StateComplete();
			
	ePMLProtUnitMode_Maintenance, ePMLUnitMode_Service:
		
		M_StateComplete();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_agingTest" Id="{005eedab-3965-4f90-9be8-7f9d4d5a9fec}">
      <Declaration><![CDATA[METHOD M_agingTest : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=0 TO iHas_rollers DO
	fb_rollers[i].M_agingTest();
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{6c772562-34c8-47b4-91c2-3dd9e3a0282e}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Execute'}
METHOD M_Execute

VAR

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE fbUnitModeManager.eModeStatus OF
	ePMLProtUnitMode_Production:		//Mode Production
		//Processing automatic Seperation
//		IF sensor_start[0].Q OR sensor_start[1].Q THEN
//			fb_rollers[0].pre_tote_status := ToteStatus.READY;
//		ELSE
//			fb_rollers[0].pre_tote_status := ToteStatus.EMPTY;
//		END_IF
//		fb_rollers[0](	id_roller := 0,
//						next_tote_status := fb_rollers[1].current_tote_status);
//		fb_rollers[1](	id_roller := 1,
//						pre_tote_status := fb_rollers[0].current_tote_status,
//						next_tote_status := fb_rollers[2].current_tote_status);
//		fb_rollers[2](	id_roller := 2,
//						pre_tote_status := fb_rollers[1].current_tote_status,
//						next_tote_status := fb_rollers[3].current_tote_status);
//		fb_rollers[3](	id_roller := 3,
//						pre_tote_status := fb_rollers[2].current_tote_status,
//						next_tote_status := GVL.fb_loading.current_tote_status);		
		
	ePMLProtUnitMode_Maintenance, ePMLUnitMode_Service:		
		//
		
	ePMLProtUnitMode_Manual:		//Manaul

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Idle" Id="{852a977a-fb07-4f73-b57c-37d614c8411c}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Idle'}
METHOD M_Idle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF G_HMI.bAging_buffer THEN
	M_agingTest();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_mapping" Id="{1382acc9-2aac-40e5-9b78-e873bc29d4e0}">
      <Declaration><![CDATA[METHOD M_mapping : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//todo:reconfig dios
/////////////////////////////////////digital input////////////////////////////////////////

fb_rollers[0].roller.err			:= G_IO.arDI[1].Ch[0];
fb_rollers[1].roller.err			:= G_IO.arDI[1].Ch[1];
fb_rollers[1].roller.sensor(D:= G_IO.arDI[1].Ch[2],on_ms:=100,off_ms:=100);
fb_rollers[2].roller.sensor(D:= G_IO.arDI[1].Ch[3],on_ms:=100,off_ms:=100);
fb_rollers[2].roller.err			:= G_IO.arDI[1].Ch[4];
fb_rollers[3].roller.err			:= G_IO.arDI[1].Ch[5];
fb_rollers[3].roller.sensor(D:= G_IO.arDI[1].Ch[6],on_ms:=100,off_ms:=100);
fb_rollers[3].sensor_mute(D:= G_IO.arDI[1].Ch[7],on_ms:=10,off_ms:=100);
EDM_24v								:= G_IO.arDI[1].Ch[11];
EDM_sto								:= G_IO.arDI[1].Ch[12];
sensor_start[0](D:= G_IO.arDI[1].Ch[13],on_ms:=100,off_ms:=100);
sensor_start[1](D:= G_IO.arDI[1].Ch[15],on_ms:=100,off_ms:=100);
fb_rollers[0].roller.sensor(D:= G_IO.arDI[1].Ch[14],on_ms:=100,off_ms:=100);

/////////////////////////////////////digital output////////////////////////////////////////
G_IO.arDO[1].Ch[0]	:= fb_rollers[2].roller.forward;
G_IO.arDO[1].Ch[1]	:= fb_rollers[2].roller.backward;
G_IO.arDO[1].Ch[2]	:= fb_rollers[0].roller.forward;
G_IO.arDO[1].Ch[3]	:= fb_rollers[0].roller.backward;
G_IO.arDO[1].Ch[4]	:= fb_rollers[1].roller.forward;
G_IO.arDO[1].Ch[5]	:= fb_rollers[1].roller.backward;
G_IO.arDO[1].Ch[6]	:= fb_rollers[3].roller.forward;
G_IO.arDO[1].Ch[7]	:= fb_rollers[3].roller.backward;



/////////////////////////////////////fb rollers////////////////////////////////////////

FOR i:=0 TO iHas_rollers DO
	fb_rollers[i].M_mapping();
END_FOR




]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{828769aa-b396-465f-9a50-434ca369865f}">
      <Declaration><![CDATA[METHOD M_Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Take away all commands
IF GVL.stChangeIntoProduction.bYesReset THEN
;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Resetting" Id="{9a1f29a5-17c7-492c-91f2-093b5dd6c83b}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Resetting'}
METHOD M_Resetting
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE fbUnitModeManager.eModeStatus OF
	ePMLProtUnitMode_Production:		//Production, Mantainance, Manual	
		M_StateComplete();
	
	ePMLProtUnitMode_Maintenance, ePMLProtUnitMode_Manual, ePMLUnitMode_Service:
		M_StateComplete();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetUnitInfo" Id="{c1d055cf-d164-4699-93b1-6e91a9f5fa94}">
      <Declaration><![CDATA[METHOD M_SetUnitInfo
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[aUnitInfo[0].Name			:= 'roller[0]';
aUnitInfo[0].ActMode			:= eMode;
aUnitInfo[0].ActState		:= eState;

aUnitInfo[1].Name				:= 'roller[1]';
aUnitInfo[1].ActMode			:= GVL.fb_buffer.eMode;
aUnitInfo[1].ActState			:= GVL.fb_buffer.eState;

aUnitInfo[2].Name			:= 'roller[2]';
aUnitInfo[2].ActMode			:= GVL.fb_buffer.eMode;
aUnitInfo[2].ActState		:= GVL.fb_buffer.eState;

aUnitInfo[3].Name			:= 'roller[3]';
aUnitInfo[3].ActMode			:= GVL.fb_buffer.eMode;
aUnitInfo[3].ActState		:= GVL.fb_buffer.eState;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Starting" Id="{dda3e1fd-29c7-41f0-889f-35f057fc9945}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Starting'}
METHOD M_Starting
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE fbUnitModeManager.eModeStatus OF
	ePMLProtUnitMode_Production:		//Production, Mantainance, Manual
		//Resetting all Commands and Values
		G_HMI.bAging_test	:= FALSE;
		M_StateComplete();

	ePMLProtUnitMode_Maintenance, ePMLProtUnitMode_Manual, ePMLUnitMode_Service:
		M_StateComplete();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopping" Id="{e0c357c3-0799-40ea-9f63-65c4fab25377}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Stopping'}
METHOD M_Stopping
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE fbUnitModeManager.eModeStatus OF
	ePMLProtUnitMode_Production, ePMLProtUnitMode_Manual:			
		M_StateComplete();

	ePMLProtUnitMode_Maintenance, ePMLUnitMode_Service:
		M_StateComplete();	
			//not defined
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Undefined" Id="{9298f8b5-e108-4edf-8894-8f62c357fbb0}">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Undefined'}
METHOD M_Undefined
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
bUndefinedDone					:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_buffer_tote">
      <LineId Id="9" Count="0" />
      <LineId Id="95" Count="3" />
      <LineId Id="94" Count="0" />
      <LineId Id="38" Count="3" />
      <LineId Id="80" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="63" Count="3" />
      <LineId Id="82" Count="1" />
      <LineId Id="81" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="68" Count="3" />
      <LineId Id="84" Count="1" />
      <LineId Id="78" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="73" Count="3" />
      <LineId Id="87" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="89" Count="1" />
      <LineId Id="61" Count="1" />
      <LineId Id="91" Count="2" />
      <LineId Id="56" Count="0" />
      <LineId Id="45" Count="7" />
      <LineId Id="44" Count="0" />
    </LineIds>
    <LineIds Name="FB_buffer_tote.M_Aborting">
      <LineId Id="3" Count="1" />
      <LineId Id="11" Count="3" />
      <LineId Id="27" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_buffer_tote.M_agingTest">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_buffer_tote.M_Execute">
      <LineId Id="3" Count="2" />
      <LineId Id="106" Count="14" />
      <LineId Id="105" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="50" Count="3" />
      <LineId Id="64" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_buffer_tote.M_Idle">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="FB_buffer_tote.M_mapping">
      <LineId Id="352" Count="38" />
      <LineId Id="85" Count="0" />
    </LineIds>
    <LineIds Name="FB_buffer_tote.M_Reset">
      <LineId Id="3" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_buffer_tote.M_Resetting">
      <LineId Id="3" Count="1" />
      <LineId Id="45" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_buffer_tote.M_SetUnitInfo">
      <LineId Id="3" Count="7" />
      <LineId Id="54" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="56" Count="2" />
      <LineId Id="50" Count="0" />
    </LineIds>
    <LineIds Name="FB_buffer_tote.M_Starting">
      <LineId Id="3" Count="2" />
      <LineId Id="12" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_buffer_tote.M_Stopping">
      <LineId Id="3" Count="1" />
      <LineId Id="12" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_buffer_tote.M_Undefined">
      <LineId Id="4" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>